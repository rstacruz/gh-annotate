#!/usr/bin/env node

function githubSpec() {
  try {
    var exec = require('child_process').execSync;
    var out = exec('git config --get remote.origin.url', { encoding: 'utf-8' });
    out = out
      .trim()
      .replace(/^git@github\.com\//, '')
      .replace(/^https?:\/\/github\.com\//, '')
      .replace(/\.git$/, '');

    return out;
  } catch (e) {
    console.error('  ! run this in a github repository.');
    console.error('  ! make sure that "origin" points to the github repo.');
    process.exit(1);
  }
}

if (!module.parent) run();

function run () {
  var read = require('read-input');
  var argv = require('yargs').argv;
  var out;

  if (argv.version || argv.v) {
    console.log(require('../package.json').version);
    process.exit(0);
  }

  if (argv.help || argv.h) {
    help({ full: true });
    process.exit(0);
  }

  var gh = githubSpec();

  read(argv._, function (err, res) {
    if (err) throw err;
    out = injekt(res.data, gh);

    if (argv._[1]) {
      require('fs').writeFileSync(argv._[1], out, 'utf-8');
    } else {
      console.log(out);
    }
  });
}

function help (options) {
  var log = options && options.method ? options.method : console.log;

  log([
    '',
    '  Usage:',
    '      gh-annotate <file>',
    '      ... | gh-annotate',
  ].join("\n"));

  if (options && options.full) {
    log([
      '',
      '  Description:',
      '      annotates files.',
      '      if <file> is given, it\'ll be written in place.',
      '',
      '  Options:',
      '      -h, --help        show this screen',
      '      -v, --version     print version information'
    ].join("\n"));
  }
}

function injekt (input, repo) {
  var annotations = [];
  var body = "" + input;
  
  body = body.replace(/#(\d+)(.?)/g, function (_, issue, suff) {
    if (suff === ']') return _;
    var key = '[#' + issue + ']';

    if (!RegExp('(^|\n)' + escapeRegExp(key) + ':').test(body))
      annotations.push('' + key + ': https://github.com/' + repo + '/issues/' + issue);
    return '' + key + suff;
  });

  body = body.replace(/@([a-zA-Z0-9_-]+)(.?)/g, function (_, user, suff) {
    if (suff === ']') return _;
    var key = '[@' + user + ']';

    if (!RegExp('(^|\n)' + escapeRegExp(key) + ':').test(body))
      annotations.push('' + key + ': https://github.com/' + user);
    return '' + key + suff;
  });

  if (annotations.length > 0) {
    if (!/\n$/.test(body)) body = body + "\n";
    return [ body, annotations.join("\n") ].join("\n");
  } else {
    return body;
  }
}

module.exports = { run: run, injekt: injekt };

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
