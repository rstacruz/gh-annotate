#!/usr/bin/env node

if (!module.parent) run();
module.exports = { run: run, injekt: injekt };

/*
 * returns the github user/repo pair, or dies with an error if not found
 *
 *     githubSpec()  //=> "rstacruz/gh-annotate"
 */

function githubSpec() {
  try {
    var exec = require('child_process').execSync;
    var out = exec('git config --get remote.origin.url', { encoding: 'utf-8' });
    out = out
      .trim()
      .replace(/^git@github\.com\//, '')
      .replace(/^https?:\/\/github\.com\//, '')
      .replace(/\.git$/, '');

    return out;
  } catch (e) {
    console.error('');
    console.error('  ! run this in a github repository.');
    console.error('  ! make sure that "origin" points to the github repo.');
    process.exit(1);
  }
}

/*
 * run
 */

function run () {
  var read = require('read-input');
  var argv = require('yargs').argv;
  var out;

  if (argv.version || argv.v) {
    console.log(require('../package.json').version);
    process.exit(0);
  }

  if (argv.help || argv.h) {
    help({ full: true });
    process.exit(0);
  }

  var gh = githubSpec();

  read(argv._, function (err, res) {
    if (err) throw err;
    out = injekt(res.data, gh);

    if (argv._[0]) {
      require('fs').writeFileSync(argv._[0], out, 'utf-8');
    } else {
      console.log(out);
    }
  });
}

/*
 * help text
 *
 *     help()
 *     help({ full: true })
 *     help({ method: console.error })
 */

function help (options) {
  var log = options && options.method ? options.method : console.log;

  log([
    '',
    '  Usage:',
    '      gh-annotate <file>',
    '      ... | gh-annotate',
  ].join("\n"));

  if (options && options.full) {
    log([
      '',
      '  Description:',
      '      annotates files.',
      '      if <file> is given, it\'ll be written in place.',
      '',
      '  Options:',
      '      -h, --help        show this screen',
      '      -v, --version     print version information'
    ].join("\n"));
  }
}

/*
 * works on a markdown body to do its thang
 *
 *     output = injekt(input, 'rstacruz/flatdoc')
 */

function injekt (input, repo) {
  var annotations = [];
  var body = "" + input;

  var replace = replaceLink.bind({
    repo: repo,
    annotations: annotations
  });

  body = replace(body,
    /#(\d+)/,
    '[#&]',
    'https://github.com/{repo}/issues/&');

  body = replace(body,
    /@([a-zA-Z0-9_-]+)/,
    '[@&]',
    'https://github.com/&');

  if (annotations.length > 0) {
    if (!/\n$/.test(body)) body = body + "\n";
    return [ body, annotations.join("\n") ].join("\n");
  } else {
    return body;
  }
}

/*
 * replace links
 *
 *     repl = replaceLink.bind({ repo: 'rstacruz/flatdoc', annotations: [] });
 *     repl(body, /#(\d+)/, '[@&]', 'http://github.com/&');
 */

function replaceLink (body, expr, replacement, urlspec) {
  var repo = this.repo;
  var annotations = this.annotations;

  expr = RegExp('' + expr.source + '(.?)', 'g');

  return body.replace(expr, function (_, issue, suff) {
    if (suff === ']') return _;
    var key = replacement.replace('&', issue);
    var url = urlspec.replace('{repo}', repo).replace('&', issue);

    if (!RegExp('(^|\n)' + escapeRegExp(key) + ':').test(body))
      annotations.push('' + key + ': ' + url);

    return '' + key + suff;
  });
}

/*
 * escapes a string into a regexp expression
 */

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
