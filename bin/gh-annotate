#!/usr/bin/env node

if (!module.parent) run();

function run () {
  var read = require('read-input');
  var argv = require('yargs').argv;
  var out;

  if (argv.version || argv.v) {
    console.log(require('../package.json').version);
    process.exit(0);
  }

  if (argv.help || argv.h) {
    help({ full: true });
    process.exit(0);
  }

  if (!argv._[0] || argv.help || argv.h) {
    help();
    process.exit(1);
  }

  read(argv._.slice(1), function (err, res) {
    if (err) throw err;
    out = injekt(res.data, argv._[0]);

    if (argv._[1]) {
      require('fs').writeFileSync(argv._[1], out, 'utf-8');
    } else {
      console.log(out);
    }
  });
}

function help (options) {
  console.error([
    '',
    '  Usage:',
    '      gh-annotate <user>/<repo> <file>',
    '      ... | gh-annotate <user>/<repo>',
  ].join("\n"));

  if (options && options.full)
    console.error([
      '',
      '  Description:',
      '      annotates files.',
      '      if <file> is given, it\'ll be written in place.',
      '',
      '  Options:',
      '      -h, --help        show this screen',
      '      -v, --version     print version information'
    ].join("\n"));
}

function injekt (input, repo) {
  var annotations = [];
  var body = "" + input;
  
  body = body.replace(/#(\d+)(.?)/, function (_, issue, suff) {
    if (suff === ']') return _;
    var key = '[#' + issue + ']';

    if (!RegExp('(^|\n)' + escapeRegExp(key) + ':').test(body))
      annotations.push('' + key + ': https://github.com/' + repo + '/issues/' + issue);
    return '' + key + suff;
  });

  body = body.replace(/@([a-zA-Z0-9_-]+)(.?)/, function (_, user, suff) {
    if (suff === ']') return _;
    var key = '[@' + user + ']';

    if (!RegExp('(^|\n)' + escapeRegExp(key) + ':').test(body))
      annotations.push('' + key + ': https://github.com/' + user);
    return '' + key + suff;
  });

  if (annotations.length > 0) {
    if (!/\n$/.test(body)) body = body + "\n";
    return [ body, annotations.join("\n") ].join("\n");
  } else {
    return body;
  }
}

module.exports = { run: run, injekt: injekt };

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
